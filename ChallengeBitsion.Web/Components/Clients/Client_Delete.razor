@using ChallengeBitsion.Business.Models.Clients
@using ChallengeBitsion.Business.Models.Genders
@using ChallengeBitsion.Web.Pages

@inject ChallengeBitsion.Business.Interfaces.IClientService services
@inject ChallengeBitsion.Business.Interfaces.IGenderService servicesGender
@inject NavigationManager navManager

<h3>Editar Cliente</h3>

@if (client != null)
{
    <div>
        <div class="form-group">
            <label class="font-weight-bold">Nombre Completo: </label>
            <label>@client.FullName</label>
        </div>
        <div class="form-group">
            <label class="font-weight-bold">Identificación:</label>
            <label>@client.Identification</label>
        </div>
        <div class="form-group">
            <label class="font-weight-bold">Edad: </label>
            <label>@client.Age</label>
        </div>

        <div class="form-group">
            <label>Genero</label>
            <select disabled>
                @foreach (var item in genders)
                {
                    <option value="@item.Id" selected="@(client.Gender_Id==item.Id)">@item.Name</option>
                }
            </select>
        </div>

        <div class="form-group">
            <div>
                <input type="checkbox" disabled checked="@client.Status" />
                <label>Activo</label>
            </div>

            <div>
                <input type="checkbox" disabled checked="@client.Drive" />
                <label>Maneja</label>
            </div>

            <div>
                <input type="checkbox" disabled checked="@client.Glasses" />
                <label>Usa Lentes</label>
            </div>

            <div>
                <input type="checkbox" disabled checked="@client.Diabetic" />
                <label>Diabetico</label>
            </div>
        </div>

        <div class="form-group">
            <label class="col-form-label">¿Padece alguna otra enfermedad? ¿Cuál?</label>
            <label class="form-control">@client.OtherDiseases</label>
        </div>

        <div class="text-danger" hidden="@String.IsNullOrWhiteSpace(ErrorMessaje)">
            <label>@ErrorMessaje</label>
        </div>
    </div>

    <div class="form-group">
        <button @onclick="Delete" class="btn btn-primary">Borrar</button>
        <button @onclick="Cancel" class="btn btn-primary">Cancelar</button>
    </div>
}
else
{
    <h4 class="alert-warning">No se encontro el cliente</h4>
    <button @onclick="Cancel" class="btn btn-primary">Atras</button>
}

@code {
    [Parameter]
    public string Id { get; set; }
    int IdInt;

    ClientEditDTO client = new ClientEditDTO();
    List<GenderDTO> genders = new List<GenderDTO>();
    string ErrorMessaje = "";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        IdInt = int.Parse(Id);

        genders = await servicesGender.GetAll();
        client = await services.Get(IdInt);
    }

    protected async Task Delete()
    {
        try
        {
            await services.Delete(client.Id);
            navManager.NavigateTo("clients");
        }
        catch (Exception ex)
        {
            ErrorMessaje = "Ocurrió un error inesperado, reintente mas tarde.";
        }

    }

    protected void Cancel()
    {
        navManager.NavigateTo("clients");
    }
}
